import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import '../services/location_service.dart';
import '../services/auth_service.dart';
import 'map_screen.dart';
import 'login_screen.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  String _statusMessage = "Ê≠£Âú®ÂàùÂßãÂåñ...";
  bool _isLoading = true;
  bool _hasError = false;

  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    try {
      // Ê™¢Êü•‰ΩçÁΩÆÊúçÂãô
      setState(() => _statusMessage = "Ê™¢Êü• GPS ÊúçÂãôÁãÄÊÖã...");
      bool serviceEnabled = await LocationService.isLocationServiceEnabled();
      if (!serviceEnabled) {
        setState(() {
          _statusMessage = "‚ö†Ô∏è GPS ÊúçÂãôÊú™ÈñãÂïüÔºÅË´ãÊ™¢Êü•Ë£ùÁΩÆÁöÑ GPS Ë®≠ÂÆö„ÄÇ";
          _hasError = true;
          _isLoading = false;
        });
        return;
      }

      // Ê™¢Êü•Ê¨äÈôê
      setState(() => _statusMessage = "GPS ÊúçÂãôÂ∑≤ÈñãÂïüÔºåÊ™¢Êü•Ê¨äÈôê‰∏≠...");
      LocationPermission permission = await LocationService.checkAndRequestPermission();
      
      if (permission == LocationPermission.denied) {
        setState(() {
          _statusMessage = "‚ùå GPS Ê¨äÈôêË¢´ÊãíÁµïÔºÅË´ãÊâãÂãïÂÖÅË®±‰ΩçÁΩÆÊ¨äÈôê„ÄÇ";
          _hasError = true;
          _isLoading = false;
        });
        return;
      }

      if (permission == LocationPermission.deniedForever) {
        setState(() {
          _statusMessage = "üö´ GPS Ê¨äÈôêÊ∞∏‰πÖË¢´ÊãíÔºÅË´ãÂà∞Ë®≠ÂÆö‰∏≠ÊâãÂãïÂÖÅË®±‰ΩçÁΩÆÂ≠òÂèñ„ÄÇ";
          _hasError = true;
          _isLoading = false;
        });
        return;
      }

      // Áç≤Âèñ‰ΩçÁΩÆ
      setState(() => _statusMessage = "‚úÖ Ê¨äÈôêÂ∑≤Áç≤ÂæóÔºåÂòóË©¶Áç≤Âèñ GPS ‰ΩçÁΩÆ...");
      Position position = await LocationService.getCurrentPosition();
      
      setState(() {
        _statusMessage = "üéØ GPS ÊàêÂäüÔºÅ\nÁ∑ØÂ∫¶: ${position.latitude}, Á∂ìÂ∫¶: ${position.longitude}";
      });
      
      // Ê™¢Êü•Áî®Êà∂ÊòØÂê¶Â∑≤ÁôªÂÖ•
      setState(() => _statusMessage = "Ê™¢Êü•ÁôªÂÖ•ÁãÄÊÖã...");
      bool isLoggedIn = false;
      try {
        final user = await AuthService.getCurrentUser();
        isLoggedIn = user != null;
        if (isLoggedIn) {
          print('Áî®Êà∂Â∑≤ÁôªÂÖ•ÔºåID: ${user.$id}');
        }
      } catch (e) {
        print('Ê™¢Êü•ÁôªÂÖ•ÁãÄÊÖãÊôÇÂá∫ÈåØ: $e');
        // Â¶ÇÊûúÂá∫ÈåØÔºåÂÅáË®≠Áî®Êà∂Êú™ÁôªÂÖ•
        isLoggedIn = false;
      }
      
      setState(() {
        _statusMessage = isLoggedIn ? "Â∑≤ÁôªÂÖ•ÔºåÊ≠£Âú®ÈÄ≤ÂÖ•ÊáâÁî®..." : "Êú™ÁôªÂÖ•ÔºåË´ãÂÖàÁôªÂÖ•...";
        _isLoading = false;
      });
      
      // Â∞éËà™Âà∞ÈÅ©Áï∂ÁöÑÈ†ÅÈù¢
      Future.delayed(const Duration(seconds: 2), () {
        if (mounted) {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => isLoggedIn
                  ? MapScreen(initialPosition: position)
                  : LoginScreen(initialPosition: position),
            ),
          );
        }
      });
    } catch (e) {
      setState(() {
        _statusMessage = "‚ùå ÂàùÂßãÂåñÂ§±ÊïóÔºö$e";
        _hasError = true;
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(24.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                const Text(
                  "Duck Tour Guide",
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 40),
                if (_isLoading) const CircularProgressIndicator(),
                const SizedBox(height: 24),
                Text(
                  _statusMessage,
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    fontSize: 16,
                    color: _hasError ? Colors.red : Colors.black87,
                  ),
                ),
                if (_hasError) ...[  
                  const SizedBox(height: 24),
                  ElevatedButton(
                    onPressed: () {
                      setState(() {
                        _isLoading = true;
                        _hasError = false;
                      });
                      _initializeApp();
                    },
                    child: const Text("ÈáçË©¶"),
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }
}